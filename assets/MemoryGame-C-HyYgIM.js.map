{"version":3,"file":"MemoryGame-C-HyYgIM.js","sources":["../../src/components/home/games/MemoryGame.tsx"],"sourcesContent":["import React, { useState, useEffect, useMemo, useCallback } from \"react\";\r\n\r\ninterface Card {\r\n  id: number;\r\n  emoji: string;\r\n  isFlipped: boolean;\r\n  isMatched: boolean;\r\n}\r\n\r\n/**\r\n * It is a memory game component that allows the user to flip cards and match them.\r\n * It is a simple game that can be used to test the user's memory.\r\n */\r\nconst MemoryGame: React.FC = () => {\r\n  const emojis: string[] = useMemo(() => {\r\n    const allEmojis = [\r\n      \"🎮\",\r\n      \"🎲\",\r\n      \"🎯\",\r\n      \"🎨\",\r\n      \"🎭\",\r\n      \"🎪\",\r\n      \"🎟️\",\r\n      \"🎫\",\r\n      \"🎼\",\r\n      \"🎵\",\r\n      \"🎹\",\r\n      \"🎷\",\r\n      \"🎺\",\r\n      \"🎸\",\r\n      \"🪕\",\r\n      \"🎻\",\r\n      \"⚽\",\r\n      \"⚾\",\r\n      \"🏀\",\r\n      \"🏐\",\r\n      \"🏈\",\r\n      \"🏉\",\r\n      \"🎾\",\r\n      \"🥏\",\r\n      \"🎳\",\r\n      \"🏏\",\r\n      \"🏑\",\r\n      \"🏒\",\r\n      \"🥍\",\r\n      \"🏓\",\r\n      \"🏸\",\r\n      \"🥊\",\r\n      \"🌈\",\r\n      \"🌟\",\r\n      \"🚀\",\r\n      \"🔥\",\r\n      \"☀️\",\r\n      \"🌙\",\r\n      \"⛈️\",\r\n      \"🌤️\",\r\n      \"🌦️\",\r\n      \"🌧️\",\r\n      \"🌩️\",\r\n      \"🌪️\",\r\n      \"🌫️\",\r\n      \"🌬️\",\r\n      \"🌈\",\r\n      \"🌊\",\r\n      \"🦁\",\r\n      \"🐯\",\r\n      \"🐮\",\r\n      \"🐷\",\r\n      \"🐸\",\r\n      \"🐙\",\r\n      \"🦄\",\r\n      \"🦊\",\r\n      \"🐶\",\r\n      \"🐱\",\r\n      \"🐭\",\r\n      \"🐹\",\r\n      \"🐰\",\r\n      \"🦒\",\r\n      \"🐘\",\r\n      \"🦚\",\r\n    ];\r\n    // Randomly select 8 unique emojis from the array\r\n    return allEmojis.sort(() => Math.random() - 0.5).slice(0, 8);\r\n  }, []);\r\n  const [cards, setCards] = useState<Card[]>([]);\r\n  const [flippedCards, setFlippedCards] = useState<number[]>([]);\r\n  const [moves, setMoves] = useState<number>(0);\r\n  const [isComplete, setIsComplete] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    const shuffledCards: Card[] = [...emojis, ...emojis]\r\n      .sort(() => Math.random() - 0.5)\r\n      .map((emoji, index) => ({\r\n        id: index,\r\n        emoji,\r\n        isFlipped: false,\r\n        isMatched: false,\r\n      }));\r\n    setCards(shuffledCards);\r\n    setMoves(0);\r\n    setIsComplete(false);\r\n    setFlippedCards([]);\r\n  }, [emojis]);\r\n\r\n  const handleCardClick = (clickedId: number): void => {\r\n    if (flippedCards.length === 2) return;\r\n    if (cards[clickedId].isMatched || cards[clickedId].isFlipped) return;\r\n\r\n    const newCards = [...cards];\r\n    newCards[clickedId].isFlipped = true;\r\n    setCards(newCards);\r\n    setFlippedCards([...flippedCards, clickedId]);\r\n\r\n    if (flippedCards.length === 1) {\r\n      setMoves(moves + 1);\r\n      const [firstCard] = flippedCards;\r\n\r\n      if (cards[firstCard].emoji === cards[clickedId].emoji) {\r\n        setTimeout(() => {\r\n          const matchedCards = [...cards];\r\n          matchedCards[firstCard].isMatched = true;\r\n          matchedCards[clickedId].isMatched = true;\r\n          setCards(matchedCards);\r\n          setFlippedCards([]);\r\n\r\n          if (matchedCards.every((card) => card.isMatched)) {\r\n            setIsComplete(true);\r\n          }\r\n        }, 500);\r\n      } else {\r\n        setTimeout(() => {\r\n          const resetCards = [...cards];\r\n          resetCards[firstCard].isFlipped = false;\r\n          resetCards[clickedId].isFlipped = false;\r\n          setCards(resetCards);\r\n          setFlippedCards([]);\r\n        }, 1000);\r\n      }\r\n    }\r\n  };\r\n\r\n  const restartGame = useCallback(() => {\r\n    const shuffledCards: Card[] = [...emojis, ...emojis]\r\n      .sort(() => Math.random() - 0.5)\r\n      .map((emoji, index) => ({\r\n        id: index,\r\n        emoji,\r\n        isFlipped: false,\r\n        isMatched: false,\r\n      }));\r\n    setCards(shuffledCards);\r\n    setMoves(0);\r\n    setIsComplete(false);\r\n    setFlippedCards([]);\r\n  }, [emojis]);\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center justify-center min-h-screen bg-gray-900 p-4 my-64\">\r\n      <div className=\"mb-4 text-white\">\r\n        <span className=\"text-xl\">Moves: {moves}</span>\r\n        {isComplete && <span className=\"ml-4 text-green-400\">Complete!</span>}\r\n      </div>\r\n\r\n      {isComplete && (\r\n        <button\r\n          onClick={restartGame}\r\n          className=\"mb-4 px-4 py-2 bg-green-500 text-white rounded\"\r\n        >\r\n          Restart\r\n        </button>\r\n      )}\r\n\r\n      <div className=\"grid grid-cols-4 gap-4 max-w-md\">\r\n        {cards.map((card) => (\r\n          <div\r\n            key={card.id}\r\n            onClick={() => handleCardClick(card.id)}\r\n            className=\"relative w-24 h-24 cursor-pointer preserve-3d\"\r\n          >\r\n            <div\r\n              className={`absolute w-full h-full transition-all duration-500 transform-style-preserve-3d ${\r\n                card.isFlipped || card.isMatched ? \"rotate-y-180\" : \"\"\r\n              }`}\r\n            >\r\n              <div className=\"absolute w-full h-full bg-blue-500 rounded-lg backface-hidden flex items-center justify-center\"></div>\r\n\r\n              {/* Back of card */}\r\n              <div\r\n                className={`absolute w-full h-full rounded-lg backface-hidden flex items-center justify-center transform rotate-y-180 ${\r\n                  card.isMatched ? \"bg-purple-600 opacity-50\" : \"bg-purple-600\"\r\n                }`}\r\n              >\r\n                <span className=\"text-4xl\">{card.emoji}</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <style>{`\r\n        .preserve-3d {\r\n          perspective: 1000px;\r\n        }\r\n        .transform-style-preserve-3d {\r\n          transform-style: preserve-3d;\r\n        }\r\n        .backface-hidden {\r\n          backface-visibility: hidden;\r\n        }\r\n        .rotate-y-180 {\r\n          transform: rotateY(180deg);\r\n        }\r\n      `}</style>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MemoryGame;\r\n"],"names":["MemoryGame","emojis","useMemo","cards","setCards","useState","flippedCards","setFlippedCards","moves","setMoves","isComplete","setIsComplete","useEffect","shuffledCards","emoji","index","handleCardClick","clickedId","newCards","firstCard","matchedCards","card","resetCards","restartGame","useCallback","jsxs","jsx"],"mappings":"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"}